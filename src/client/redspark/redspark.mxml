<?xml version="1.0" encoding="utf-8"?>
<mx:Application
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:v="com.salesbuilder.view.*" 
	xmlns:c="com.salesbuilder.control.*" 
	xmlns:lib="flexlib.containers.*" 
	width="100%" height="100%"
	backgroundColor="#ffffff"
	layout="absolute"
	paddingLeft="5" paddingRight="0" paddingBottom="0" paddingTop="0"	
	applicationComplete="initApp()">
	
	<mx:Script><![CDATA[
	
	import mx.controls.Alert;	
	import flash.utils.Timer;
	import org.igniterealtime.xiff.core.*;
	import org.igniterealtime.xiff.data.*;
	import org.igniterealtime.xiff.events.*;		
	import org.igniterealtime.xiff.auth.Anonymous;
        import org.igniterealtime.xiff.vcard.VCard;
	import org.igniterealtime.xiff.openlink.*;

	import com.moneyserve.control.ConnectionManager;
	
	import com.salesbuilder.control.TabManager;

	import mx.managers.PopUpManager;
	import mx.events.ItemClickEvent;
	import flash.system.Security;

	private var connection:XMPPConnection;
	private var connectiontype:String = "socket";
	private var keepAliveTimer:Timer;
	private var _lastSent:int = 0;

	public function windowCloseEvent():void 
	{
		logout();
	}

	private function initApp():void
	{
		TabManager.tabNavigator = tn;

		loginDialog.setVisible(true);
		mainDialog.setVisible(false);

		connectSetup();
		focusUsername();
		
		ExternalInterface.addCallback("windowCloseEvent", windowCloseEvent);		
	}

	private function synchronize():void
	{

	}

	private function buttonBarClick(event:ItemClickEvent):void
	{
		switch (event.index) 
		{
			case 0:
				//TabManager.openDashboard();				
				//TabManager.openTab(Demo1, "Instant messaging Demo");
				
				break;
			case 1:
				//TabManager.openTab(Demo2, "Video Chat with phones Demo");
				break;
			case 2:
				//TabManager.openTab(ContactSummary, "ContactSummary");
				break;
			case 3:
				//TabManager.openTab(OpportunitySummary, "OpportunitySummary");
				break;
			case 4:
				//TabManager.openDashboard();
				break;
		}
	}

	private function toggleMaximize():void
	{

	}

	private function search():void
	{
		searchPopup.search(searchStr.text);
	}

	protected function searchKeyDownHandler(event:KeyboardEvent):void
	{
		if (searchPopup.currentState == "hidden" && event.keyCode != Keyboard.DOWN)
		{
			return
		}

		switch (event.keyCode) 
		{
			case Keyboard.DOWN:
				if (searchPopup.currentState == "hidden") searchPopup.currentState = "";
				searchPopup.selectNext();
			break;
			case Keyboard.UP:
				searchPopup.selectPrevious();
				searchStr.setSelection(searchStr.text.length, searchStr.text.length);
			break;
			case Keyboard.ENTER:
				searchPopup.openSelectedItem();
			break;
			case Keyboard.ESCAPE:
				searchPopup.currentState = "hidden";
			break;
		}
	}

	private function newAccount():void
	{

	}

	private function loginToServer():void {

		if(userNameField.length == 0 || passwordField.length == 0) 
		{
			showErrorText("Please enter username and password");
			return;
		}

		connection.username = userNameField.text;
		connection.password = passwordField.text;


		if (connectiontype == "socket") {
			connection.connect(XMPPConnection.STREAM_TYPE_STANDARD);
		} else {			
			connection.connect( XMPPConnection.STREAM_TYPE_STANDARD_TERMINATED);
		}

		loginButton.enabled = false;
		showErrorText("");				
	}


	public function logout():void
	{
		// Send an unavilable presence
		//var recipient:EscapedJID = new EscapedJID(connection.domain);
		//var unavailablePresence:Presence = new Presence(recipient, null, Presence.TYPE_UNAVAILABLE, null, "Logged out");
		//connection.send(unavailablePresence);

		// Now disconnect
		connection.disconnect();
	}

	private function connectSetup():void 
	{  
		connectiontype = ExternalInterface.call("getConnectionType");
		
		switch(connectiontype)
		{
			case "http":
				connection = new XMPPBOSHConnection(false);
				connection.port = ExternalInterface.call("getPort");
				break;

			case "https":
				connection = new XMPPBOSHConnection(true);
				connection.port = ExternalInterface.call("getPort");				
				break;

			case "rtmp":
				connection = new RTMPConnection("rtmpe:/xmpp");			
				break;

			case "tls":
				connection = new XMPPTLSConnection();
				connection.port = 5222;										
				//connection.tls = true;
				break;

			case "socket":

			default:
				connection = new XMPPConnection();
				connection.port = 5222;										

		}

		connection.resource = "redspark";
		connection.domain = ExternalInterface.call("getDomain");     			
		connection.server = ExternalInterface.call("getHostname"); 
		
		ConnectionManager.connection = connection;

	      	//Security.allowDomain( "*" );
	      	//Security.allowInsecureDomain("*");
	      	//Security.loadPolicyFile("xmlsocket://" + connection.server + ":5229");

		connection.addEventListener("outgoingData", function(event:Event):void 
		{
			_lastSent = new Date().getTime();
		});


		connection.addEventListener(ConnectionSuccessEvent.CONNECT_SUCCESS, function(evt:ConnectionSuccessEvent):void 
		{

		});


		connection.addEventListener(LoginEvent.LOGIN, function( event:LoginEvent):void 
		{
			loginDialog.setVisible(false);
			mainDialog.setVisible(true);
			welcome.text = "Welcome " + connection.username;

			var recipient:EscapedJID = new EscapedJID(connection.domain);
			var availablePresence:Presence = new Presence(recipient, null, null, null, "Logged In");
			connection.send(availablePresence);

			if (keepAliveTimer) keepAliveTimer.stop();

			keepAliveTimer = new Timer(15000);
			keepAliveTimer.addEventListener(TimerEvent.TIMER, checkKeepAlive);
			keepAliveTimer.start();
			
		    	var vcard:VCard = VCard.getVCard(connection, connection.jid);
		    	
		    	if (vcard != null)
		    	{
		    		if (vcard.loaded)
				{
					handleVCard(vcard);

				} else	{
					vcard.addEventListener(VCardEvent.LOADED, function(event:VCardEvent):void { handleVCard(event.vcard); });
				}
			}

			//TabManager.openDashboard();
		});

		connection.addEventListener(XIFFErrorEvent.XIFF_ERROR, function(event:XIFFErrorEvent):void 
		{
			showErrorText(event.errorCondition + " " + event.errorMessage);
		});

		connection.addEventListener(DisconnectionEvent.DISCONNECT, function(event:DisconnectionEvent):void 
		{
			if (keepAliveTimer) keepAliveTimer.stop();
		
			loginDialog.setVisible(true);
			loginButton.enabled = true;

			mainDialog.setVisible(false);

		});
		
		connection.addEventListener(MessageEvent.MESSAGE, function(event:MessageEvent):void 
		{
			var message:Message = event.data as Message;						
			var xNode:XMLNode = message.getNode().firstChild;

			if (xNode.nodeName == "x" && xNode.attributes.xmlns == "jabber:x:conference")
			{
				ExternalInterface.call("confInvite", xNode.attributes.jid, connection.username, connection.password);

			}
			
			if (xNode.nodeName == "event" && xNode.attributes.xmlns == "http://jabber.org/protocol/pubsub#event")
			{
				handlePubsub(xNode);
			}						

			if (xNode.nodeName == "voicebridge" && xNode.attributes.xmlns == "http://xmpp.org/protocol/openlink:01:00:00/features#voice-bridge")
			{
				ExternalInterface.call("videoInvite", xNode.attributes.me, xNode.attributes.others);
			}

		});		


		userNameField.text = "1291";
		passwordField.text = "969131";			
	}

	private function handlePubsub(eventNode:XMLNode):void
	{
		var jid:String = null;		
		var source:String = null;
		var eventtype:String = null;
		var dtmf:String = null;
		var participants:String = null;
		var callstate:String = null;
		var conference:String = null;
		var participant:String = null;
		var callinfo:String = null;
		var eventinfo:String = null;		
		var sendstream:String = null;
		var recievestream:String = null;
		var videostream:String = null;		


		var vbNode:XMLNode = eventNode.firstChild.firstChild.firstChild;

		if (vbNode.nodeName == "voicebridge")
		{	
			var vbParameters:Array = vbNode.childNodes;	

			for each(var vbParameter:XMLNode in vbParameters)
			{	
				if(vbParameter.nodeName == 'jid' && vbParameter.firstChild != null)
				{
					jid = vbParameter.firstChild.nodeValue;
				}
				
				if(vbParameter.nodeName == 'source' && vbParameter.firstChild != null)
				{
					source = vbParameter.firstChild.nodeValue;
				}
				
				if(vbParameter.nodeName == 'eventtype' && vbParameter.firstChild != null)
				{
					eventtype = vbParameter.firstChild.nodeValue;
				}
				
				if(vbParameter.nodeName == 'participants' && vbParameter.firstChild != null)
				{
					participants = vbParameter.firstChild.nodeValue;
				}
				
				if(vbParameter.nodeName == 'callstate'  && vbParameter.firstChild != null)
				{
					callstate = vbParameter.firstChild.nodeValue;
				}
				
				if(vbParameter.nodeName == 'conference' && vbParameter.firstChild != null)
				{
					conference = vbParameter.firstChild.nodeValue;
				}
				
				if(vbParameter.nodeName == 'participant' && vbParameter.firstChild != null)
				{
					participant = vbParameter.firstChild.nodeValue;
				}
				
				if(vbParameter.nodeName == 'callinfo' && vbParameter.firstChild != null)
				{
					callinfo = vbParameter.firstChild.nodeValue;
				}
				
				if(vbParameter.nodeName == 'eventinfo' && vbParameter.firstChild != null)
				{
					eventinfo = vbParameter.firstChild.nodeValue;
				}
				
				if(vbParameter.nodeName == 'sendstream' && vbParameter.firstChild != null)
				{
					sendstream = vbParameter.firstChild.nodeValue;
				}
				
				if(vbParameter.nodeName == 'recievestream' && vbParameter.firstChild != null)
				{
					recievestream = vbParameter.firstChild.nodeValue;
				}
				
				if(vbParameter.nodeName == 'videostream' && vbParameter.firstChild != null)
				{
					videostream = vbParameter.firstChild.nodeValue;
				}
				
				if(vbParameter.nodeName == 'dtmf' && vbParameter.firstChild != null)
				{
					dtmf = vbParameter.firstChild.nodeValue;
				}								
			}
			
			Alert.show(jid + " " + source + " " + eventtype + " " + callstate + " " + conference + " " + videostream);
		}				
	}

	public function subscribeCommand(jid:String): void
	{
		var subscribe:Subscribe = new Subscribe(IQ.TYPE_SET,("pubsub."+connection.server), connection.username+"@"+connection.server);
		subscribe.setJID(connection.username+"@"+connection.server);
		subscribe.setNode(jid);
		
		var iq1:IQ = subscribe.addQuery();
		iq1.callback = bridgeCallBackHandler;
		connection.send(iq1);
	}
	
	public function bridgeCommand(jid:String, actions:Array) : void
	{
		var request:ManageVoiceBridge = new ManageVoiceBridge(IQ.TYPE_SET,("voicebridge1."+connection.server),connection.username+"@"+connection.server,"execute");
		request.setJID(jid);
		request.setActions(actions);
		
		var iq2:IQ = request.addQuery();
		iq2.callback = bridgeCallBackHandler;
		connection.send(iq2);
		
	}

	public function bridgeCallBackHandler(iq:IQ):void
	{	
		var commandNode:XMLNode = iq.getNode().firstChild;
		var replyNode:XMLNode = commandNode.firstChild;

		if(replyNode != null && replyNode.nodeName == "note")
		{	
			Alert.show(replyNode.nodeValue);
		}
	}
	
	
	private function focusUsername():void 
	{
		focusManager.setFocus(userNameField);
	}

	public function checkKeepAlive(event:TimerEvent):void 
	{
		if(new Date().getTime() - _lastSent > 15000)
			connection.sendKeepAlive();
	}


	public function reset():void 
	{
		if(loginButton.enabled == false)
		{
			loginButton.enabled = true;
			focusManager.setFocus(userNameField);
		}
	}

	public function showErrorText(text:String):void {
		errorLabel.text = text;
	}

	private function handleKeyUp(event:KeyboardEvent):void 
	{
		if(event.keyCode == Keyboard.ENTER)
		{
			loginToServer();
		}
	}
	
	public function handleVCard(card:VCard):void 
	{
	
		if (card != null)
		{
			var displayName:String = connection.username;
			var nickname:String = card.nickname;
			
			if (card.name != null)
			{
				var firstName:String = card.name.given;
				var lastName:String = card.name.family;
				
				if(firstName && firstName.length > 0 && lastName && lastName.length > 0)
					displayName = firstName + " " + lastName;				
			}

			if(nickname && nickname.length > 0)
				displayName = nickname;


			welcome.text = "Welcome " + displayName;
		}
		
	}	
	
	]]></mx:Script>
	
	<mx:Style source="styles.css"/>
	
	<mx:states>
		<mx:State name="hidesearch">
			<mx:RemoveChild target="{searchPopup}"/>
		</mx:State>
	</mx:states>

	<!-- Holds lists of application parameters: states, industries, sales people, etc... -->
	<!-- c:Params id="params"/ -->

	<mx:Canvas verticalCenter="0" horizontalCenter="0" width="450" height="200" styleName="appContainer" visible="true" id="loginDialog" verticalScrollPolicy="off" includeInLayout="{loginDialog.visible}">

		<mx:Label id="mainTitle" text="RedSpark" fontSize="18" top="10" horizontalCenter="0"/>
		
		<mx:Grid left="20" right="20" top="80" width="100%">
			<mx:GridRow width="100%" height="100%">
				<mx:GridItem width="100%" height="100%">
					<mx:Label text="Username" styleName="formLabel" />
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:Label id="passwordLabel" text="Password" styleName="formLabel" />
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow width="100%" height="100%">
				<mx:GridItem width="100%" height="100%">
					<mx:TextInput fontSize="11" width="100%" id="userNameField" color="black" paddingRight="0" text="1292" />
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:TextInput fontSize="11" width="100%" id="passwordField" color="black"  displayAsPassword="true" keyUp="handleKeyUp(event)" text="969131" />
				</mx:GridItem>
			</mx:GridRow>
		</mx:Grid>
		<mx:HBox width="100%" horizontalAlign="right" top="150" right="20" left="20" >
			<mx:Label fontSize="12" fontWeight="bold"  id="errorLabel" color="#FF9B26" />
			<mx:Spacer width="100%" />
			<mx:Button height="23" id="loginButton" label="Login" click="loginToServer()" />
		</mx:HBox>

	</mx:Canvas>
	
	<mx:Canvas top="0" left="0" right="0" width="100%" height="100%" styleName="appContainer" visible="false" id="mainDialog" includeInLayout="{mainDialog.visible}">
		
		<!-- The Window Header -->
		<mx:Canvas top="0" left="0" right="0">
	
			<mx:Label text="UBS Demo" styleName="appTitle" left="22" verticalCenter="0"/>
			
			<mx:Label id="welcome" styleName="welcome" right="555" verticalCenter="0"/>
			
			<mx:Image source="@Embed('assets/male_user_gray_sm.png')" right="490" top="5" verticalCenter="0" toolTip="{welcome.text}"/>
			
			<mx:Image source="@Embed('assets/top_separator.png')" right="490.5" y="0"/>
	
		 	<mx:ButtonBar id="bb" right="285" height="29" itemClick="buttonBarClick(event)" verticalCenter="0" buttonWidth="40">
				<mx:dataProvider>
				<!--
					<mx:Object icon="@Embed('assets/icon_home.png')" toolTip="Home"/>
					<mx:Object icon="@Embed('assets/icon_account.png')" toolTip="Customers"/>
					<mx:Object icon="@Embed('assets/icon_contact.png')" toolTip="Contacts"/>
					<mx:Object icon="@Embed('assets/icon_opportunity.png')" toolTip="Money Transfers"/>
					<mx:Object icon="@Embed('assets/icon_dashboard.png')" toolTip="Dashboard"/>
				-->
					<mx:Object icon="@Embed('assets/icon_opportunity.png')" toolTip="IM Demo" />				
					<mx:Object icon="@Embed('assets/icon_contact.png')" toolTip="Video Demo" />
					
				</mx:dataProvider>
			</mx:ButtonBar>
			
			<mx:Button icon="@Embed('assets/icon_plus.png')" width="31" height="29" click="newAccount()" verticalCenter="0" right="248"/>
			
			<mx:Image source="@Embed('assets/top_separator.png')" right="232.5" y="0"/>
	
			<mx:Image source="@Embed('assets/search.png')" right="82" verticalCenter="0"/>
			<mx:TextInput id="searchStr" borderStyle="none" backgroundAlpha="0" width="110" right="101" verticalCenter="2" focusThickness="0" change="search()"
				borderSkin="@Embed('assets/blank.png')"
				keyDown="searchKeyDownHandler(event)"/>
			
			<mx:Image source="@Embed('assets/icon_close.png')" visible="{searchPopup.currentState == ''}" right="91" verticalCenter="0"
				click="searchPopup.currentState = 'hidden'"/>

			<mx:Image source="@Embed('assets/top_separator.png')" right="66.5" y="0"/>

	
			<mx:Button styleName="iconMinimize" verticalCenter="0" right="46" />
			<mx:Button styleName="iconMaximize" verticalCenter="0" right="33" />
			<mx:Button styleName="iconClose" verticalCenter="0" right="20" click="logout()" />

	
		</mx:Canvas>
	
		<mx:Box styleName="tabContainer"  backgroundSize="100%" top="62" left="14" right="14" bottom="28" paddingTop="1" paddingLeft="2" paddingBottom="2" paddingRight="2">
			<lib:SuperTabNavigator id="tn" width="100%" height="100%" tabWidth="140"/>
		</mx:Box>

		<mx:HRule top="90" left="16" right="16" width="100%" height="1" strokeColor="#B9B9B9"/>
		
		<v:SearchPopup id="searchPopup" top="56" right="66"/>

		<mx:Image source="@Embed('assets/icon_grip.png')" bottom="14" right="10" />

	</mx:Canvas>
</mx:Application>