<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
	backgroundColor="#DDDDDD"
    	paddingLeft="0"
    	paddingTop="0"
    	paddingBottom="0"
    	paddingRight="0"
    	xmlns:s="library://ns.adobe.com/flex/spark" 
    	xmlns:red5="*" 
	xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="1024" minHeight="600" creationComplete="initApplication()">
	
	<fx:Script> 
		<![CDATA[ 
		import flash.external.*;
		import flash.media.Camera;
		import flash.net.NetConnection;
		import flash.net.NetGroup;
		import flash.net.GroupSpecifier;
		import flash.net.Responder;	
		import flash.net.NetStream;	
		import flash.utils.Timer;		
		
		import mx.core.*;
		import mx.events.FlexEvent;
		
		private var rtmpUrl:String = "rtmp:/oflaDemo";
		private var rtmfpUrl:String = "rtmfp://p2p.rtmfp.net/e423fa356c187078552b994c-004820ca784f/";		
		private var p2pEnabled:Boolean = true;
		private var timer:Timer;
		
		private var streamKey:String = "KEY";
		private var stream:String = "ME";	
		private var stream0:String = null;
		private var stream1:String = null;
		private var stream2:String = null;
		private var stream3:String = null;
		private var stream4:String = null;
		private var stream5:String = null;
		private var stream6:String = null;
		private var stream7:String = null;
		private var stream8:String = null;
		private var stream9:String = null;
		private var stream10:String = null;
		private var stream11:String = null;
		
		private var myCam:Camera; 
		private var myMic:Microphone;
		
		private var videoWidth:int = 256;
		private var videoHeight:int = 192;
		private var videoPicQuality:int = 0;
		private var videoFps:int = 15;
		private var videoBandwidth:int = 25600;
		private var micSetRate:int = 22;
		
		private var nc:NetConnection = null;
		private var group:NetGroup = null;
		private var groupspec:GroupSpecifier;
		
		private var nsX:NetStream;
		private var ns0:NetStream;
		private var ns1:NetStream;
		private var ns2:NetStream;
		private var ns3:NetStream;
		private var ns4:NetStream;
		private var ns5:NetStream;
		private var ns6:NetStream;
		private var ns7:NetStream;
		private var ns8:NetStream;
		private var ns9:NetStream;
		private var ns10:NetStream;
		private var ns11:NetStream;

		private var vid0:Video = new Video();
		private var vid1:Video = new Video();
		private var vid2:Video = new Video();
		private var vid3:Video = new Video();
		private var vid4:Video = new Video();
		private var vid5:Video = new Video();
		private var vid6:Video = new Video();
		private var vid7:Video = new Video();
		private var vid8:Video = new Video();
		private var vid9:Video = new Video();
		private var vid10:Video = new Video();
		private var vid11:Video = new Video();
			
		public function initApplication():void 
		{
			// Define handling for window close
			ExternalInterface.addCallback("windowCloseEvent", windowCloseEvent);

			// Initialise streaming parameters
			rtmpUrl		= FlexGlobals.topLevelApplication.parameters.rtmpUrl == null 	? rtmpUrl : 	FlexGlobals.topLevelApplication.parameters.rtmpUrl;
			rtmfpUrl	= FlexGlobals.topLevelApplication.parameters.rtmfpUrl == null 	? rtmfpUrl : 	FlexGlobals.topLevelApplication.parameters.rtmfpUrl;
			streamKey	= FlexGlobals.topLevelApplication.parameters.key == null 	? streamKey : 	FlexGlobals.topLevelApplication.parameters.key;
			stream		= FlexGlobals.topLevelApplication.parameters.stream == null 	? stream : 	FlexGlobals.topLevelApplication.parameters.stream;
			
			stream0		= FlexGlobals.topLevelApplication.parameters.stream0 == null 	? stream0 : 	FlexGlobals.topLevelApplication.parameters.stream0;
			stream1		= FlexGlobals.topLevelApplication.parameters.stream1 == null 	? stream1 : 	FlexGlobals.topLevelApplication.parameters.stream1;
			stream2		= FlexGlobals.topLevelApplication.parameters.stream2 == null 	? stream2 : 	FlexGlobals.topLevelApplication.parameters.stream2;
			stream3		= FlexGlobals.topLevelApplication.parameters.stream3 == null 	? stream3 : 	FlexGlobals.topLevelApplication.parameters.stream3;
			stream4		= FlexGlobals.topLevelApplication.parameters.stream4 == null 	? stream4 : 	FlexGlobals.topLevelApplication.parameters.stream4;
			stream5		= FlexGlobals.topLevelApplication.parameters.stream5 == null 	? stream5 : 	FlexGlobals.topLevelApplication.parameters.stream5;
			stream6		= FlexGlobals.topLevelApplication.parameters.stream6 == null 	? stream6 : 	FlexGlobals.topLevelApplication.parameters.stream6;
			stream7		= FlexGlobals.topLevelApplication.parameters.stream7 == null 	? stream7 : 	FlexGlobals.topLevelApplication.parameters.stream7;
			stream8		= FlexGlobals.topLevelApplication.parameters.stream8 == null 	? stream8 : 	FlexGlobals.topLevelApplication.parameters.stream8;
			stream9		= FlexGlobals.topLevelApplication.parameters.stream9 == null 	? stream9 : 	FlexGlobals.topLevelApplication.parameters.stream9;
			stream10	= FlexGlobals.topLevelApplication.parameters.stream10 == null 	? stream10 :	FlexGlobals.topLevelApplication.parameters.stream10;
			stream11	= FlexGlobals.topLevelApplication.parameters.stream11 == null 	? stream11 : 	FlexGlobals.topLevelApplication.parameters.stream11;

			setupConnection();
			
			// Open streaming connection, first try RTMFP
			
			nc.connect(rtmfpUrl);				
		}

		private function setupConnection():void
		{					
			// Initialise the connection
			
			nc = new NetConnection();
			nc.client = this;

			nc.addEventListener(NetStatusEvent.NET_STATUS, function (evt:NetStatusEvent ):void 
			{
				logMessage("NC " + evt.info.code);
			
				switch(evt.info.code) 
				{
					case "NetGroup.Connect.Success":
						connected();									
						break;
					
					case "NetConnection.Connect.Failed":
					case "NetConnection.Connect.Rejected":

						p2pEnabled = false;
						timer = new Timer(1000);

						timer.addEventListener(TimerEvent.TIMER, function onTimer(evt:TimerEvent):void
						{
							timer.stop();
							nc.connect(rtmpUrl);															
						});

						timer.start();

				
					case "NetConnection.Connect.Success":
						
						if (p2pEnabled)
						{
							setupGroup();	
							
						} else {
							
							try {
								connected();
							} catch (e:Error) {}
						}
						break;

					default:
				}		    	
			});


			nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR,  function (event:SecurityErrorEvent):void 
			{		    	

			});
								
		}

		private function setupGroup():void
		{
			groupspec = new GroupSpecifier("e423fa356c187078552b994c-004820ca784f-redfire-spark");
			
			if (rtmfpUrl == "rtmfp:") 
			{
				groupspec.multicastEnabled = true;
				groupspec.ipMulticastMemberUpdatesEnabled = true;
				groupspec.addIPMulticastAddress("225.225.0.1:30303");
				
			} else {
				
				groupspec.serverChannelEnabled = true;				
			}
			
			groupspec.routingEnabled = true;				
			groupspec.postingEnabled = true;
			groupspec.multicastEnabled = true;

			group = new NetGroup(nc, groupspec.groupspecWithAuthorizations());
			
			group.addEventListener(NetStatusEvent.NET_STATUS, function (evt:NetStatusEvent ):void 
			{
			    logMessage("GRP " + evt.info.code);
			
			    switch(evt.info.code) 
			    {
				case "NetGroup.Connect.Success":
					connected();									
					break;
					

				case "NetGroup.Connect.Failed":
				case "NetGroup.Connect.Rejected":
				
					p2pEnabled = false;
					nc.connect(rtmpUrl);
					break;

				case "NetGroup.SendTo.Notify":						
					
					break;

				case "NetGroup.Posting.Notify":
				
					break;	

				case "NetGroup.Neighbor.Connect":				
					break;

				case "NetGroup.Neighbor.Disconnect":
				
					break;
						
				default:

			  }		    	
			});			
		} 
		
		
		public function windowCloseEvent():void 
		{
			disconnected();
		}

		private function connected():void
		{
			logMessage("Enter...connected");
			
			// Initialise the local camera and microphone source
			
			myCam = Camera.getCamera()
			myCam.setMode(videoWidth,videoHeight,videoFps,true);
			myCam.setQuality(videoBandwidth,videoPicQuality);
			
			myMic = getMicrophone();
			//myMic.rate = micSetRate;

			// Initialise the up-stream NetStream

			if (p2pEnabled)
			{
				nsX = new NetStream(nc, groupspec.groupspecWithAuthorizations());				
				
			} else {
			
				nsX = new NetStream(nc);
			}

			nsX.bufferTime = 0;		
				
			nsX.addEventListener(NetStatusEvent.NET_STATUS, function (evt:NetStatusEvent ):void 
			{	
				logMessage("PUB " + evt.info.code);

				switch(evt.info.code) 
				{
					case "NetStream.Connect.Success":
			
					case "NetStream.Play.StreamNotFound":
						break;

					case "NetStream.Play.Failed":	
						break;

					case "NetStream.Play.Start":							
						break;

					case "NetStream.Play.Stop":
						break;

					case "NetStream.Buffer.Full":
						break;

					default:
				}		    	
			});


			nsX.addEventListener(AsyncErrorEvent.ASYNC_ERROR, function (event:AsyncErrorEvent):void 
			{		    	

			});

			nsX.attachCamera(myCam);
			nsX.attachAudio(myMic);
			nsX.publish(streamKey + stream,"live");			
			
			// Play 12 streams			
			
			initVidDisplay(ns0,vid0,video_uic0, stream0);			
			initVidDisplay(ns1,vid1,video_uic1, stream1);
			initVidDisplay(ns2,vid2,video_uic2, stream2);
			initVidDisplay(ns3,vid3,video_uic3, stream3);
			initVidDisplay(ns4,vid4,video_uic4, stream4);
			initVidDisplay(ns5,vid5,video_uic5, stream5);
			initVidDisplay(ns6,vid6,video_uic6, stream6);
			initVidDisplay(ns7,vid7,video_uic7, stream7);
			initVidDisplay(ns8,vid8,video_uic8, stream8);
			initVidDisplay(ns9,vid9,video_uic9, stream9);
			initVidDisplay(ns10,vid10,video_uic10, stream10);
			initVidDisplay(ns11,vid11,video_uic11, stream11);
		}

		private function getMicrophone() :Microphone 
		{
			var m : Microphone;

			if(Capabilities.version.search('10,3') == -1)
			{
				m = Microphone(Microphone.getMicrophone());

			} else {
				m = Microphone(Microphone['getEnhancedMicrophone']());
				var options : MicrophoneEnhancedOptions = new MicrophoneEnhancedOptions();
				options.mode = MicrophoneEnhancedMode.FULL_DUPLEX;
				options.autoGain = false;
				options.echoPath = 128;
				options.nonLinearProcessing = true;
				m['enhancedOptions'] = options;
			} 
			
			m.gain = 75;
			m.codec = "Speex";
			m.encodeQuality = 5;
			m.setUseEchoSuppression(true);
			
			return m;
		}


		private function disconnected():void 
		{
			ns0.play(false);
			ns1.play(false);
			ns2.play(false);
			ns3.play(false);
			ns4.play(false);
			ns5.play(false);
			ns6.play(false);
			ns7.play(false);
			ns8.play(false);
			ns9.play(false);
			ns10.play(false);
			ns11.play(false);

			nsX.attachCamera(null);
			nsX.attachAudio(null);	
			
			nc.close();
		}


		private function initVidDisplay(ns:NetStream, vid:Video, uic:VideoObject, streamId:String):void 
		{		
			// Configure the stream	

			if (p2pEnabled)
			{
				ns = new NetStream(nc, groupspec.groupspecWithAuthorizations());				
				
			} else {
			
				ns = new NetStream(nc);
			}
			
			var nsClientObj:Object = new Object();

			nsClientObj.onMetaData = function(infoObject:Object):void
			{					
			};

			nsClientObj.onPlayStatus = function(infoObject:Object):void
			{					
			};


			ns.receiveVideo(true);
			ns.bufferTime = 0;		
			ns.client = nsClientObj;
				
			// Initialise the NetStreams with the new connection

			ns.addEventListener(NetStatusEvent.NET_STATUS, function (evt:NetStatusEvent ):void 
			{	
				logMessage("SUB " + evt.info.code);

				switch(evt.info.code) 
				{
					case "NetStream.Connect.Success":
						break;

					case "NetStream.Play.StreamNotFound":
						break;

					case "NetStream.Play.Failed":	
						break;

					case "NetStream.Play.Start":							
						break;

					case "NetStream.Play.Stop":
						break;

					case "NetStream.Buffer.Full":
						break;

					default:
				}		    	
			});


			ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, function (event:AsyncErrorEvent):void 
			{		    	

			});
				
			
			// Resize the display

			uic.width = videoWidth;
			uic.height = videoHeight;

		
			if (streamId == null) 
			{
				uic.visible = false;
				return;
			}
						
			// Resize the video object
			
			uic.visible = true;			
			vid.width = videoWidth;
			vid.height = videoHeight;

			// Init the component			
			uic.video = vid;

			
			if (streamId == stream)
			{			
				uic.addEventListener("click", function(evt:Event):void
				{
					if (uic.mic.text == "audio:on" && uic.cam.text == "video:on") {
						uic.mic.text = ("audio:off");
						uic.cam.text = ("video:on");
					} else

					if (uic.mic.text == "audio:off" && uic.cam.text == "video:on") {
						uic.mic.text = ("audio:on");
						uic.cam.text = ("video:off");
					} else

					if (uic.mic.text == "audio:on" && uic.cam.text == "video:off") {
						uic.mic.text = ("audio:off");
						uic.cam.text = ("video:off");
					} else

					if (uic.mic.text == "audio:off" && uic.cam.text == "video:off") {
						uic.mic.text = ("audio:on");
						uic.cam.text = ("video:on");
					}
					
					if (uic.cam.text == "video:on") 
					{
						nsX.attachCamera(myCam);
					} else {
						nsX.attachCamera(null);
					}

					if (uic.mic.text == "audio:on") 
					{
						nsX.attachAudio(myMic);
					
					} else {
						nsX.attachAudio(null);				
					}
				});
				
				
				// Play my webcam
				uic.video.attachCamera(myCam);

				uic.caption.text = streamId;
				uic.cam.text = "video:on";
				uic.mic.text = "audio:on";
				uic.action.text = "";					
			
			} else {

				uic.addEventListener("click", function(evt:Event):void
				{
					if (uic.action.text == "") {
						uic.action.text = "stopped";
						ns.play(false);

					} else

					if (uic.action.text == "stopped") {
						uic.action.text = "";
						ns.play(streamKey + streamId);					
					}				
				});
			

				// Start streaming
				
				uic.video.attachNetStream(ns);				
				ns.play(streamKey + streamId);
				
				uic.caption.text = streamId;
				uic.cam.text = "";
				uic.mic.text = "";
				uic.action.text = "";					
			}
			
			logMessage("Setup play stream " + streamId);
		} 
		
		private function logMessage(message:String):void
		{
			DebugLabel.text = message;
			trace(message);
		}

	]]> 
	</fx:Script>
	
	<s:VGroup id="vGroup1" horizontalAlign="center">	
		<s:HGroup horizontalAlign="center">
			<red5:VideoObject id="video_uic0" visible="false" />
			<red5:VideoObject id="video_uic1" visible="false" />
			<red5:VideoObject id="video_uic2" visible="false" />
			<red5:VideoObject id="video_uic3" visible="false" />			
		</s:HGroup>
		<s:HGroup horizontalAlign="center">
			<red5:VideoObject id="video_uic4" visible="false" />
			<red5:VideoObject id="video_uic5" visible="false" />
			<red5:VideoObject id="video_uic6" visible="false" />
			<red5:VideoObject id="video_uic7" visible="false" />
		</s:HGroup>
		<s:HGroup horizontalAlign="center">
			<red5:VideoObject id="video_uic8" visible="false" />
			<red5:VideoObject id="video_uic9" visible="false" />
			<red5:VideoObject id="video_uic10" visible="false" />
			<red5:VideoObject id="video_uic11" visible="false" />
		</s:HGroup>
	</s:VGroup>
	<s:Label x="10" y="602" id="DebugLabel"/>
</mx:Application>
